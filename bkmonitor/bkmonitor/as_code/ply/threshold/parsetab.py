# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND EQ FLOAT GT GTE INT LT LTE MINUS NEQ OR\n    expression : expression OR term\n    \n    expression : term\n    \n    term : term AND condition\n    \n    term : condition\n    \n    condition : EQ number\n              | NEQ number\n              | GT number\n              | GTE number\n              | LT number\n              | LTE number\n    \n    number : INT\n           | MINUS INT\n    \n    number : FLOAT\n           | MINUS FLOAT\n    '

_lr_action_items = {
    'EQ': (
        [
            0,
            10,
            11,
        ],
        [
            4,
            4,
            4,
        ],
    ),
    'NEQ': (
        [
            0,
            10,
            11,
        ],
        [
            5,
            5,
            5,
        ],
    ),
    'GT': (
        [
            0,
            10,
            11,
        ],
        [
            6,
            6,
            6,
        ],
    ),
    'GTE': (
        [
            0,
            10,
            11,
        ],
        [
            7,
            7,
            7,
        ],
    ),
    'LT': (
        [
            0,
            10,
            11,
        ],
        [
            8,
            8,
            8,
        ],
    ),
    'LTE': (
        [
            0,
            10,
            11,
        ],
        [
            9,
            9,
            9,
        ],
    ),
    '$end': (
        [
            1,
            2,
            3,
            12,
            13,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
        ],
        [
            0,
            -2,
            -4,
            -5,
            -11,
            -13,
            -6,
            -7,
            -8,
            -9,
            -10,
            -1,
            -3,
            -12,
            -14,
        ],
    ),
    'OR': (
        [
            1,
            2,
            3,
            12,
            13,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
        ],
        [
            10,
            -2,
            -4,
            -5,
            -11,
            -13,
            -6,
            -7,
            -8,
            -9,
            -10,
            -1,
            -3,
            -12,
            -14,
        ],
    ),
    'AND': (
        [
            2,
            3,
            12,
            13,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
        ],
        [
            11,
            -4,
            -5,
            -11,
            -13,
            -6,
            -7,
            -8,
            -9,
            -10,
            11,
            -3,
            -12,
            -14,
        ],
    ),
    'INT': (
        [
            4,
            5,
            6,
            7,
            8,
            9,
            14,
        ],
        [
            13,
            13,
            13,
            13,
            13,
            13,
            23,
        ],
    ),
    'MINUS': (
        [
            4,
            5,
            6,
            7,
            8,
            9,
        ],
        [
            14,
            14,
            14,
            14,
            14,
            14,
        ],
    ),
    'FLOAT': (
        [
            4,
            5,
            6,
            7,
            8,
            9,
            14,
        ],
        [
            15,
            15,
            15,
            15,
            15,
            15,
            24,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    'expression': (
        [
            0,
        ],
        [
            1,
        ],
    ),
    'term': (
        [
            0,
            10,
        ],
        [
            2,
            21,
        ],
    ),
    'condition': (
        [
            0,
            10,
            11,
        ],
        [
            3,
            3,
            22,
        ],
    ),
    'number': (
        [
            4,
            5,
            6,
            7,
            8,
            9,
        ],
        [
            12,
            16,
            17,
            18,
            19,
            20,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> expression", "S'", 1, None, None, None),
    ('expression -> expression OR term', 'expression', 3, 'p_expression', '__init__.py', 55),
    ('expression -> term', 'expression', 1, 'p_expression_term', '__init__.py', 62),
    ('term -> term AND condition', 'term', 3, 'p_term', '__init__.py', 69),
    ('term -> condition', 'term', 1, 'p_term_condition', '__init__.py', 76),
    ('condition -> EQ number', 'condition', 2, 'p_condition', '__init__.py', 83),
    ('condition -> NEQ number', 'condition', 2, 'p_condition', '__init__.py', 84),
    ('condition -> GT number', 'condition', 2, 'p_condition', '__init__.py', 85),
    ('condition -> GTE number', 'condition', 2, 'p_condition', '__init__.py', 86),
    ('condition -> LT number', 'condition', 2, 'p_condition', '__init__.py', 87),
    ('condition -> LTE number', 'condition', 2, 'p_condition', '__init__.py', 88),
    ('number -> INT', 'number', 1, 'p_number', '__init__.py', 95),
    ('number -> MINUS INT', 'number', 2, 'p_number', '__init__.py', 96),
    ('number -> FLOAT', 'number', 1, 'p_number_float', '__init__.py', 106),
    ('number -> MINUS FLOAT', 'number', 2, 'p_number_float', '__init__.py', 107),
]
