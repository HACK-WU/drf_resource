# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2022-08-22 11:38
from __future__ import unicode_literals

from django.db import migrations


def migrate_event_plugin(apps, *args, **kwargs):
    EventPlugin = apps.get_model("bkmonitor", "EventPlugin")
    EventPluginV2 = apps.get_model("bkmonitor", "EventPluginV2")
    EventPluginInstance = apps.get_model("bkmonitor", "EventPluginInstance")
    default_config_params = [
        {
            "field": "begin_time",
            "name": "开始时间",
            "value": "{{begin_time}}",
            "is_required": True,
            "is_hidden": True,
            "default_value": "{{begin_time}}",
        },
        {
            "field": "end_time",
            "name": "结束时间",
            "value": "{{end_time}}",
            "is_required": True,
            "is_hidden": True,
            "default_value": "{{end_time}}",
        },
    ]

    new_plugins = []
    new_plugin_instances = []
    for old_plugin in EventPlugin.objects.all():
        new_plugins.append(
            EventPluginV2(
                **{
                    "plugin_id": old_plugin.plugin_id,
                    "version": "1.0.0",
                    "is_latest": True,
                    "plugin_type": old_plugin.plugin_type,
                    "summary": "接入指定参数格式的REST API告警",
                    "author": "蓝鲸智云",
                    "tags": ["REST", "PULL"],
                    "config_params": default_config_params,
                    "ingest_config": old_plugin.ingest_config,
                    "normalization_config": old_plugin.normalization_config,
                    "description": old_plugin.description,
                    "tutorial": old_plugin.tutorial,
                    "bk_biz_id": old_plugin.bk_biz_id,
                }
            )
        )

        # 历史已有的data_id， 转移到新的
        new_plugin_instances.append(
            EventPluginInstance(
                **{
                    "bk_biz_id": old_plugin.bk_biz_id,
                    "plugin_id": old_plugin.plugin_id,
                    "version": "1.0.0",
                    "config_params": default_config_params,
                    "normalization_config": old_plugin.normalization_config,
                    "ingest_config": old_plugin.ingest_config,
                    "name": f"{old_plugin.plugin_display_name}",
                    "data_id": old_plugin.data_id,
                }
            )
        )

    if new_plugins:
        print("begin to migrate old plugins, count({})".format(len(new_plugins)))
        EventPluginV2.objects.bulk_create(new_plugins)
        EventPluginInstance.objects.bulk_create(new_plugin_instances)
        print("end to migrate pld plugins, count({})".format(len(new_plugins)))
    else:
        print("task of migrate plugins ignored because there is no old plugin")


class Migration(migrations.Migration):
    dependencies = [
        ("bkmonitor", "0112_auto_20220819_2014"),
    ]

    operations = [
        migrations.RunPython(migrate_event_plugin),
    ]
