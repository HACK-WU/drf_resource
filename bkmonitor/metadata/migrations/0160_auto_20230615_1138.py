# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2023-06-15 03:38
from __future__ import unicode_literals

from django.db import migrations, models

import bkmonitor.utils.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('metadata', '0159_auto_20230606_2140'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataPipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.CharField(max_length=64, verbose_name='创建者')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updater', models.CharField(max_length=64, verbose_name='更新者')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='链路管道名称')),
                (
                    'chinese_name',
                    models.CharField(
                        blank=True, help_text='如果不传递，可以和name保持一致', max_length=64, null=True, verbose_name='链路管道中文名称'
                    ),
                ),
                (
                    'label',
                    models.CharField(blank=True, help_text='管道的标签', max_length=256, null=True, verbose_name='标签'),
                ),
                ('kafka_cluster_id', models.IntegerField(verbose_name='消息队列 kafka 集群 ID')),
                ('transfer_cluster_id', models.CharField(max_length=64, verbose_name='transfer 集群 ID')),
                (
                    'influxdb_storage_cluster_id',
                    models.IntegerField(blank=True, null=True, verbose_name='influxdb 存储 id'),
                ),
                ('kafka_storage_cluster_id', models.IntegerField(blank=True, null=True, verbose_name='kafka 存储集群 id')),
                ('es_storage_cluster_id', models.IntegerField(blank=True, null=True, verbose_name='es 存储集群 id')),
                ('vm_storage_cluster_id', models.IntegerField(blank=True, null=True, verbose_name='vm 存储集群 id')),
                ('is_enable', models.BooleanField(default=True, verbose_name='是否启用')),
                ('description', models.TextField(blank=True, null=True, verbose_name='链路描述信息')),
            ],
            options={
                'verbose_name': '数据链路信息',
                'verbose_name_plural': '数据链路信息',
            },
        ),
        migrations.CreateModel(
            name='DataPipelineDataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.CharField(max_length=64, verbose_name='创建者')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updater', models.CharField(max_length=64, verbose_name='更新者')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('data_pipeline_name', models.CharField(max_length=64, verbose_name='链路管道名称')),
                ('bk_data_id', models.IntegerField(verbose_name='数据源 ID')),
            ],
            options={
                'verbose_name': '数据链路和数据源关系',
                'verbose_name_plural': '数据链路和数据源关系',
            },
        ),
        migrations.CreateModel(
            name='DataPipelineEtlConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.CharField(max_length=64, verbose_name='创建者')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updater', models.CharField(max_length=64, verbose_name='更新者')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('data_pipeline_name', models.CharField(max_length=64, verbose_name='链路管道名称')),
                ('etl_config', models.CharField(max_length=32, verbose_name='允许的场景类型')),
                ('is_default', models.BooleanField(default=False, verbose_name='是否为默认')),
            ],
            options={
                'verbose_name': '数据链路和场景类型关系',
                'verbose_name_plural': '数据链路和场景类型关系',
            },
        ),
        migrations.CreateModel(
            name='DataPipelineSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.CharField(max_length=64, verbose_name='创建者')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updater', models.CharField(max_length=64, verbose_name='更新者')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('data_pipeline_name', models.CharField(max_length=64, verbose_name='链路管道名称')),
                ('space_type', models.CharField(max_length=64, verbose_name='允许的空间类型')),
                (
                    'space_id',
                    models.CharField(
                        blank=True,
                        help_text='允许的空间 ID, 当允许某一类空间访问时，可以为空',
                        max_length=256,
                        null=True,
                        verbose_name='允许的空间ID',
                    ),
                ),
                ('is_default', models.BooleanField(default=False, verbose_name='是否为默认')),
            ],
            options={
                'verbose_name': '数据链路和空间关系',
                'verbose_name_plural': '数据链路和空间关系',
            },
        ),
        migrations.AddField(
            model_name='clusterinfo',
            name='default_settings',
            field=bkmonitor.utils.db.fields.JsonField(default={}, null=True, verbose_name='集群的默认配置'),
        ),
        migrations.AddField(
            model_name='clusterinfo',
            name='label',
            field=models.CharField(default='', max_length=32, null=True, verbose_name='用途标签'),
        ),
        migrations.AlterField(
            model_name='resulttable',
            name='default_storage',
            field=models.CharField(
                choices=[
                    ('influxdb', 'influxDB'),
                    ('kafka', 'kafka'),
                    ('redis', 'redis'),
                    ('elasticsearch', 'elasticsearch'),
                    ('argus', 'argus'),
                    ('victoria_metrics', 'victoria_metrics'),
                ],
                max_length=32,
                verbose_name='默认存储方案',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='datapipelinedatasource',
            unique_together={('data_pipeline_name', 'bk_data_id')},
        ),
    ]
