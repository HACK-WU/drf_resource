# Generated by Django 3.2.15 on 2023-08-03 07:45

from django.db import migrations, models

from metadata.models.space.space_data_source import get_real_biz_id

model_dict = {
    "DataSource": None,
    "ResultTable": None,
    "DataSourceResultTable": None,
    "TimeSeriesGroup": None,
    "EventGroup": None,
    "Space": None,
}

space_id_obj_dict = {}
space_uid_obj_dict = {}


def get_space_by_biz_id(bk_biz_id: int):
    if bk_biz_id > 0:
        return space_uid_obj_dict.get(f"bkcc__{bk_biz_id}")
    elif bk_biz_id < 0:
        return space_id_obj_dict.get(abs(bk_biz_id))
    else:
        return None


def init_space_uid(apps, schema_editor):
    for model_name in list(model_dict.keys()):
        model_dict[model_name] = apps.get_model("metadata", model_name)

    DataSource = model_dict["DataSource"]
    TimeSeriesGroup = model_dict["TimeSeriesGroup"]
    EventGroup = model_dict["EventGroup"]
    Space = model_dict["Space"]
    ResultTable = model_dict["ResultTable"]
    DataSourceResultTable = model_dict["DataSourceResultTable"]

    for space in Space.objects.all():
        space_id_obj_dict[space.id] = space
        space_uid_obj_dict[f"{space.space_type_id}__{space.space_id}"] = space

    # 根据rt表获取bk_biz_id
    table_biz_id_dict = {
        rt["table_id"]: rt["bk_biz_id"]
        for rt in ResultTable.objects.exclude(bk_biz_id=0).values("table_id", "bk_biz_id")
    }
    updated_data_ids = set()
    ds_list = []
    for dsrt in DataSourceResultTable.objects.values("bk_data_id", "table_id"):
        bk_data_id = dsrt["bk_data_id"]
        table_id = dsrt["table_id"]
        bk_biz_id = table_biz_id_dict.get(table_id)
        if bk_biz_id and bk_data_id not in updated_data_ids:
            space = get_space_by_biz_id(bk_biz_id)
            if space:
                updated_data_ids.add(bk_data_id)
                ds_list.append(
                    DataSource(
                        bk_data_id=bk_data_id,
                        space_type_id=space.space_type_id,
                        space_uid=f"{space.space_type_id}__{space.space_id}",
                    )
                )

    # 根据data_name获取bk_biz_id
    ts_groups = TimeSeriesGroup.objects.values_list("bk_data_id", flat=True)
    event_groups = EventGroup.objects.values_list("bk_data_id", flat=True)
    for ds in DataSource.objects.exclude(bk_data_id__in=updated_data_ids).values("bk_data_id", "data_name"):
        is_in_ts_group = ds["bk_data_id"] in ts_groups
        is_in_event_group = ds["bk_data_id"] in event_groups
        bk_biz_id = get_real_biz_id(ds["data_name"], is_in_ts_group, is_in_event_group)
        space = get_space_by_biz_id(bk_biz_id)
        if space:
            ds["space_type_id"], ds["space_uid"] = space.space_type_id, f"{space.space_type_id}__{space.space_id}"
            ds_list.append(DataSource(**ds))

    DataSource.objects.bulk_update(ds_list, fields=["space_type_id", "space_uid"], batch_size=500)


class Migration(migrations.Migration):
    dependencies = [
        ('metadata', '0165_spacevminfo'),
    ]

    operations = [
        migrations.AddField(
            model_name='datasource',
            name='space_uid',
            field=models.CharField(default='', max_length=256, verbose_name='所属空间的UID'),
        ),
        migrations.RunPython(init_space_uid),
    ]
